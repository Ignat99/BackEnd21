
buildscript {
    ext {
        kotlinVersion = '1.2.31'
        springBootVersion = '1.5.9.RELEASE'
    }

    repositories {
        mavenCentral()

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("mysql:mysql-connector-java:5.1.45")

    }

}
plugins {
    id 'org.liquibase.gradle' version '1.2.4'
    id 'org.sonarqube' version '2.6.1'
}


sonarqube {
    properties {
        property 'backend21', 'Example of SonarQube Scanner'
    }
}


group 'backend21'
version '1.0-SNAPSHOT'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

springBoot {
    mainClass = "backend21.SpringEntryPoint"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


group 'backend21'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8


repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/libs-milestone" }
    maven { url "http://jcenter.bintray.com" }
    jcenter()

}

configurations.all {
   exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}


dependencies {
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.2")
    compile "mysql:mysql-connector-java:5.1.45"
    //compile 'javax.mail:mail:1.4.1'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile "javax.persistence:javax.persistence-api:2.2"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-log4j2"
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    compile 'commons-io:commons-io:2.6'
    compile 'org.elasticsearch:elasticsearch:6.2.2'
    compile 'org.elasticsearch.client:transport:6.2.2'
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.security.oauth:spring-security-oauth2:2.2.0.RELEASE"
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    compile group: 'com.google.apis', name: 'google-api-services-translate', version: 'v2-rev51-1.23.0'

    compile 'org.apache.httpcomponents:httpclient:4.5.3'
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "com.h2database:h2:1.4.194"
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:1.9.5"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:${kotlinVersion}"
    compile("org.liquibase:liquibase-core")
    testCompile "io.rest-assured:rest-assured:3.0.6"
    testCompile "io.rest-assured:spring-mock-mvc:3.0.6"

    compile 'org.springframework.boot:spring-boot-starter-mail:2.0.2.RELEASE'
    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
    compile group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0'
    compile group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.0'
    compile group: 'javax.activation', name: 'activation', version: '1.1.1'
    compile group: 'org.apache.velocity', name: 'velocity', version: '1.7'
    compile("io.springfox:springfox-swagger2:2.7.0")
    compile("io.springfox:springfox-swagger-ui:2.7.0")

}

test {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
    environment "ENV", "test"
    environment "DB_URL", "jdbc:h2:mem:test"
//    environment "DB_URL","jdbc:mysql://172.18.0.4:3306/backend21"
//    environment "SQL_HOST", "172.18.0.4"
//    environment "DB_USER", "test"
//    environment "DB_PASS", "test"
    environment "FRONTEND_HOST", "localhost"
    environment "FRONTEND_PORT", "8080"
    environment "TWITTER2RABBIT_HOST", "localhost"
    environment "TWITTER2RABBIT_PORT", "8080"
    environment "ELASTIC_HOST", "elasticsearch.service"
//    environment "ELASTIC_HOST", "172.18.0.2"
//    environment "ELASTIC_PORT", "9300"
    environment "ELASTIC_PORT", "9300"
    environment "ELASTIC_INDEX", "demo"
    environment "ELASTIC_INDEX_TYPE", "tweet"
    environment "EMAIL_HOST", "smtp.gmail.com"
    environment "EMAIL_PORT", "587"
    environment "EMAIL_USERNAME", "ignat99@gmail.com"
    environment "EMAIL_PASSWORD", ""
}

bootRun {
    environment "ENV", "development"
    environment "DB_URL","jdbc:mysql://172.18.0.4:3306/backend21"
//    environment "DB_URL","jdbc:mysql://database.service:3306/backend21"
    environment "DB_USER", "test"
    environment "DB_PASS", "test"
    environment "FRONTEND_HOST", "localhost"
    environment "FRONTEND_PORT", "8080"
    environment "TWITTER2RABBIT_HOST", "localhost"
    environment "TWITTER2RABBIT_PORT", "8080"
    environment "ELASTIC_HOST", "172.18.0.2"
//    environment "ELASTIC_HOST", "elasticsearch.service"
    environment "ELASTIC_PORT", "9300"
    environment "ELASTIC_INDEX", "demo"
    environment "ELASTIC_INDEX_TYPE", "tweet"
    environment "EMAIL_HOST", "smtp.gmail.com"
    environment "EMAIL_PORT", "587"
    environment "EMAIL_USERNAME", "ignat99@gmail.com"
    environment "EMAIL_PASSWORD", ""
}

sourceSets {
    main.java.srcDirs += "src/main/kotlin"
    test.java.srcDirs += "src/test/kotlin"
}


task jacocoTestReport1(type: JacocoReport, dependsOn: ['test', 'jacocoTestReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def mainSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories = files([mainSrc])
}
